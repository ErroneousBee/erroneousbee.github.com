<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="CREATED" content="19991123;22522605">
<meta name="CHANGED" content="16010101;0">
<meta name="DESCRIPTION"
content="Style Tips for Rexx in OS/390 environments.">
<meta name="KEYWORDS" content="Rexx TSO MVS OS/390">
<title>Style Guide for Rexx</title>
</head>

<body bgcolor="#FFFFFF">

<table border="0" cellpadding="2" width="100%"
style="page-break-before: always">
    <tr>
        <td><p align="left"><a href="index.html"><img
        src="../Pics/o_up.gif" border="0" width="30" height="30"
        name="Graphic1"></a><a href="index.html">Up to the computing page. </a><br>
        <a href="mailto:NHancock@bigfoot.com"><img
        src="../Pics/o_mailto.gif" border="0" width="30"
        height="30" name="Graphic2"></a><a
        href="mailto:NHancock@bigfoot.com">Send Feedback.</a></p>
        </td>
        <td><p align="right">Last-modified: 01 Sept 2000<br>
        Version: 1.3c<br>
        Author: Neil Hancock</p>
        </td>
    </tr>
</table>

<h1 align="center"><img src="../Pics/fish3.gif" width="100"
height="50" name="Graphic3"></h1>

<h1 align="center">Style Guide for Rexx </h1>

<hr>

<h1 align="center">Introduction.</h1>

<p>This is a style guide for the Rexx programming language,
primarily aimed at Rexx in the OS/390 environment, but
application to Rexx on other platforms, and to variants of Rexx
such as NetRexx. Many of the points here have been raised at some
time on the <a
href="http://www.marist.edu/htbin/wlvindex?tso-rexx">TSO-REXX
listserv </a>mailing list. </p>

<hr>

<h1 align="center">Using Comments. </h1>

<p>Correctly commenting code is one of the most useful things you
can do when writing code. Most style problems can be repaired
with a formatter, but useful comments cannot be conjured out of
thin air.</p>

<p><img src="../Pics/fish4.gif" width="45" height="20"
name="Graphic4">Comments come in two flavours, <strong>winged</strong>
and <strong>boxed</strong>:</p>

<table border="0" cellpadding="2" width="100%" bgcolor="#B4B8CD">
    <tr>
        <td><pre style="margin-bottom: 0.5cm">/* This is a winged comment */
/**************************************\
 *             This is a              *
 *           boxed comment            *
\**************************************/</pre>
        </td>
    </tr>
</table>

<p>Boxed comments should be reserved to highlight major
structural elements, such as the start of procedures. See the <a
href="#CalculateFactorial">Calculate_Factorial()</a> example.<br>
Winged comments are useful for describing the purpose of the
statement(s) immediatly adjacent to the comment.</p>

<p><img src="../Pics/fish4.gif" width="45" height="20"
name="Graphic5">It may also be worth borrowing from the Javadoc
idea. Comments enclosed by <strong>/** ... */ </strong>may be
read by a suitable program, and the text within associated with
the immediately following Rexx statement, and used to automate
the creation of external documentation for the program.</p>

<p><img src="../Pics/fish4.gif" width="45" height="20"
name="Graphic5">The use of asterisks (*) as the box border can
make the comment too heavy. Consider using minus (-) or another
lighter character instead. Also, don't worry about closing the
right hand vertical, as realigning the border after text
insertion is a tedious affair. You may have a Rexx reformatter
that deals with this problem.</p>

<p><img src="../Pics/fish4.gif" width="45" height="20"
name="Graphic5">A common use of boxed comments is for an <strong>informative
header</strong> at the start of the exec. Here is an example:</p>

<table border="0" cellpadding="2" width="100%" bgcolor="#B4B8CD">
    <tr>
        <td><pre>/* Rexx ----------------------------------------- AUTOTOOL
   &lt;A one line description for use by an indexing tool&gt;
   -------------------------------------------------------
   Copyright: &lt;You may want a copyright notice&gt;
   Change History:
   &lt;yy/mmm/dd Userid VersId Description&gt; 
   Description:
   &lt;A long description of the purpose of the exec.
   Include invocation arguments, examples of call
   syntax, returned values, etc.&gt; 
   ---------------------------------------------- MEMNAME */</pre>
        </td>
    </tr>
</table>

<p>It is extremely useful to have a tool to handle the creation
of a standard header, and to handle change history information.
Note the marker in the top right of the box that may be used by a
tool to spot whether this is a standard header or not.</p>

<p>An indexing tool that reads the short description and change
history is also useful, so make sure the header format supplies
information that would be useful to an indexing tool.</p>

<p>In the change history, put the most recent changes at the top,
so they are visible when the exec is opened. It may also be
useful to have a version id to mark changed code in small
comments later on.</p>

<p>It may not be worth putting some types of information in the
header, particularly data that ages poorly. Dataset names and
pointers to external information are particularly prone to
becoming incorrect.</p>

<p><img src="../Pics/fish4.gif" width="45" height="20"
name="Graphic6"> Things to avoid when creating comments:</p>

<ul>
    <li>Stating the obvious. E.g. <strong>string = TRANSLATE(STRIP(string))
        /* Strip and uppercase string */</strong> </li>
    <li>Using 'content free' phrases such as <strong>'We call
        this Rexx program to get a returned value to the caller
        consisting of....'</strong>. This also applies to
        function names, E.g. In Perform_Update_Function(), the
        words 'perform' and 'function' tell us nothing useful,
        try Update_Table() instead.</li>
    <li>Using acronyms and abbreviations to the point of
        crypticness. E.g. <strong>/* prt opt pg len */ </strong>instead
        of <strong>/* print option - page length */</strong>.</li>
</ul>

<hr>

<h1 align="center">Using Symbols and Variables. </h1>

<p>The Rexx ANSI standard talks of Rexx 'symbols'. Here I shall
use the more familiar terms 'variable', 'variable name' and 'variable
value'.<br>
Compound variables, stems, and tails refer to the whole and
various parts of compound variables. </p>

<p><img src="../Pics/fish4.gif" width="45" height="20"
name="Graphic7">Always make your variable names useful and
meaningful. </p>

<p>Some programmers use a form of <a
href="http://www.google.com/search?q=hungarian+notation">Hungarian
Notation</a> to show when a variable is boolean, a loop index,
numeric, etc. This may make your variable names not so easy to
read, and has other <a href="#Hungarian">dissadvantages</a>.</p>

<p>Consider using i, j, k, etc as loop control variables. There
are advantages and disadvantages to this:<br>
<img src="../Pics/o_plus.gif" width="50" height="10"> Faster
execution speed. Single character variable names show a
performance improvment (My simple test measured nearly 10%
improvement).<br>
<img src="../Pics/o_plus.gif" width="50" height="10"> Compound
variables names are shorter and less likely to make long
statements cross onto multiple lines.<br>
<img src="../Pics/o_minus.gif" width="50" height="10"> You have
to rely on the stem name to indicate the meaning of the data in
the compound variable. E.g. Consider compound var names <strong>record.i</strong>
and <strong>score.teamIndex.eventIndex</strong> . It is obvious
that <strong>i</strong> is the record number, but would it be
obvious from <strong>score.i.j</strong> that <strong>i</strong>
is the team and <strong>j</strong> is the event?</p>

<p><img src="../Pics/fish4.gif" width="45" height="20"
name="Graphic7">Global variables can be handled in the following
way:<br>
First, in the opening section of your Exec, set a variable named
global whose contents are the stem names of your global variables:</p>

<table border="0" cellpadding="2" width="100%" bgcolor="#B4B8CD">
    <tr>
        <td><pre>global = 'gl.' /* set a list of stems that are global variables */
gl.testVar = 'This is a sample global variable.'</pre>
        </td>
    </tr>
</table>

<p>Then, at each procedure start, expose this global, and its
contents:</p>

<table border="0" cellpadding="2" width="100%" bgcolor="#B4B8CD">
    <tr>
        <td><pre>An_Internal_Function: procedure expose (global)
say gl.testVar /* ==&gt; This is a sample global variable. */
return 0</pre>
        </td>
    </tr>
</table>

<p><img src="../Pics/fish4.gif" width="45" height="20"
name="Graphic8">Do use the <strong>procedure</strong> keyword
with every defined procedure. This hides the procedure's internal
variables from the caller, and allows the use of<strong> i,j </strong>and
<strong>k</strong> as loop control variables throughout your
program without any side effects, as in this example:</p>

<table border="0" cellpadding="2" width="100%" bgcolor="#B4B8CD">
    <tr>
        <td><pre><a name="CalculateFactorial">do i = 5 to 10</a>
 say 'Number:'i 'Factorial:'Calculate_Factorial(2,i)
end
exit
/*  --------------------------------------
    Return the multiple (factorial) of all  
    numbers between arg1 and arg2.
    -------------------------------------- */
Calculate_Factorial: procedure
parse arg startNum,endNum
factorial = 1
do i = startNum to endNum
 factorial = factorial * i
end
return factorial</pre>
        </td>
    </tr>
</table>

<p><img src="../Pics/fish4.gif" width="45" height="20"
name="Graphic9">This common problem occurs when a variable is
assigned a value, and the variable is then used in a compound
variable:</p>

<table border="0" cellpadding="2" width="100%" bgcolor="#B4B8CD">
    <tr>
        <td><pre>stem.salutation = 'HELLO!'   /* literally stem.SALUTATION = 'HELLO!' */ </pre>
        <pre>/* Output the intended result */
say stem.salutation          /* ==&gt; HELLO! */</pre>
        <pre>/* Set the tail of the compound variable to have a value */
salutation = 'GOODBYE'</pre>
        <pre>/* Now show an often unintended result */ 
say stem.salutation          /* ==&gt; STEM.GOODBYE */ 
exit</pre>
        </td>
    </tr>
</table>

<p>If you don't want this effect, you must use unassigned
variable names in the compound variable. You could use non-alphanumeric
characters such as <strong>!</strong> or <strong>?</strong> to
prefix the variable name when its used in the compund tail, or
use a numeric prefix, as symbols starting with numerics are, by
definition, constants.</p>

<table border="0" cellpadding="2" width="100%" bgcolor="#B4B8CD">
    <tr>
        <td><pre>testVar = 'HELLO'
stem.0testVar = testVar
stem.!testVar = testVar</pre>
        </td>
    </tr>
</table>

<p><a name="Hungarian"></a>Numeric prefixes are better for code
portability.<br>
The ISPF editor picks special characters (such as !) up in HILTE
mode.<br>
Non-alphanumeric characters may not be portable to foreign EBCDIC
character sets, and are not portable to some Rexx extentions,
such as Object-Oriented Rexx.</p>

<p><img src="../Pics/fish4.gif" width="45" height="20"
name="Graphic10">Large blocks of variable assignations can be
split into columns, with variable names, variable values, and
winged comments:</p>

<table border="0" cellpadding="2" width="100%" bgcolor="#B4B8CD">
    <tr>
        <td><pre><a name="VarAssignComments">gl.Bdebug</a>            = 0              /* Turns debugging on/off */
gl.!pageLength       = 60             /* print option - page length */
gl.!pageWidth        = 50             /* print option - page width */</pre>
        </td>
    </tr>
</table>

<hr>

<h1 align="center">Case, Indentation and Block Structure.</h1>

<p>Here we discuss the case we could use for syntactic elements,
what indentation is appropriate, and how we could break blocks of
statements up.</p>

<p>But first, What are we trying to achieve, and how do we go
about achieving our aim.</p>

<p><img src="../Pics/fish4.gif" width="45" height="20"
name="Graphic11">We are trying to increase the readability of the
code. </p>

<p>We can improve readability by using techniques to
differentiate and highlight elements within a statement, show
relationships between statements, and lay out the code so that
these relationships and statement elements are visible to the
reader.</p>

<p>The target audience should be anyone likely to need to change
your code in the future, including yourself. Don't assume any
knowledge of the inner workings of your code, it may be some
years before you revisit it. A reasonable knowledge of Rexx may
be assumed, even though the reader may be new to the language.
Everyone has to learn something sometime.</p>

<p><img src="../Pics/fish4.gif" width="45" height="20"
name="Graphic12">Here are some elements that go to make up
statements:</p>

<ul>
    <li>Keywords such as <strong>IF, SELECT</strong> and <strong>CALL</strong>.
    </li>
    <li>Variable names such as <strong>USERNAME</strong>, or <strong>USERCARDNUMBER</strong>.
    </li>
    <li>Major Blocks such as <strong>DO</strong> <strong>count</strong>
        - <strong>END</strong>, <strong>SELECT</strong> - <strong>END</strong>
        and <strong>label: PROCEDURE - RETURN</strong>. </li>
    <li>Contitional Blocks such as <strong>IF cond THEN DO - END</strong>
        and <strong>WHEN cond THEN DO - END</strong>. </li>
    <li>Natural Blocks of statements that together perform a
        particular function. </li>
    <li>Builtin function names such as <strong>POS()</strong>, <strong>D2B()</strong>,
        and <strong>TRANSLATE()</strong>. </li>
    <li>Implementation supplied builtin external functions such
        as <strong>MVSVAR()</strong> and <strong>LISTDSI()</strong>.
    </li>
    <li>User supplied external functions such as <strong>MYFUNC()</strong>.
    </li>
    <li>Internal functions such as <strong>MYINTERNALFUNCTION()</strong>.
    </li>
    <li>Commands to external environments such as <strong>ADDRESS
        TSO &quot;LISTCAT&quot;</strong> </li>
    <li>Comments.</li>
    <li>Literal text.</li>
</ul>

<p><img src="../Pics/fish4.gif" width="45" height="20"
name="Graphic13">Here are some techniques to improve readability
using case:</p>

<ul>
    <li><strong>UPPER</strong>, <strong>lower</strong> and <strong>Mixed</strong>
        case. </li>
    <li>Concatenated words with case differentiation such as <strong>ConcatenatedWords</strong>.
    </li>
    <li>Underscore separated words such as <strong>underscore_separated_words</strong>.
    </li>
</ul>

<p><img src="../Pics/fish4.gif" width="45" height="20"
name="Graphic14">Other techniques to improve readability are:.</p>

<ul>
    <li><strong>Indenting</strong> blocks or statements within
        blocks. </li>
    <li><strong>Aligning </strong>the start of a block with its
        end.</li>
    <li><strong>Splitting</strong> <strong>statements </strong>across
        more than one line. </li>
    <li>Inserting<strong> blank lines</strong> between blocks. </li>
    <li>Using <strong>boxed comments </strong>before major
        structural items. </li>
</ul>

<p><img src="../Pics/fish4.gif" width="45" height="20"
name="Graphic11">We are also concerned with breaking up the code
into manageable and reusable units. We can do this by using
procedures, and by surrounding blocks of statements that perform
a task with white space.</p>

<p>&nbsp;</p>

<hr>

<h1 align="center">Constraints and Influences on Style Guide
Rules</h1>

<p>There are some facts about the programming environment that
influence what techniques may be most effective.</p>

<p><img src="../Pics/fish4.gif" width="45" height="20"
name="Graphic15">External function names are related to file
names in a file system, or member names in partitioned datasets.
MYFUNC() may refer to PDS 'user.EXEC(MYFUNC)' or file name MYFUNC.REXX,
depending on your Rexx environment. By using upper case for
external function names, you avoid having to quote function names
to maintain lower case in the file name. You then, of course,
must use upper case in the file names of external functions.</p>

<p><img src="../Pics/fish4.gif" width="45" height="20"
name="Graphic15">Screen size influences how much code can be on
the screen at one time. Using too many blank lines or splitting
statements over multiple lines can move code out of the viewable
area. Techniques that disperse statements over several lines work
well on window based systems that allow the viewable area to be
adjusted, but are restricted by the fixed terminal size of 3270
systems. The same is true for boxed comments.</p>

<p><img src="../Pics/fish4.gif" width="45" height="20"
name="Graphic15">Some editors are Rexx aware and can <a
href="RexxStyleHilite.html">hilite Rexx code</a> to show keywords,
quoted strings and other elements. A Rexx aware editor such as
ISPF EDIT with the HILITE utility, can for instance turn all
keywords red, and all comments blue. There's no point in using
upper case to highlight keywords, when the editor can pick them
out with colour.</p>

<p><img src="../Pics/fish4.gif" width="45" height="20"
name="Graphic15">Keywords appear in isolation in the text, and
also tend to appear at the start of statements, so they stand out
without any help from the programmer.</p>

<p><img src="../Pics/fish4.gif" width="45" height="20"
name="Graphic15">Function and variable names tend to appear close
together in code. We need to be able to differentiate variable
names from function names, and also differentiate between the
various flavours of function; internal, external, builtin, etc.
For example:</p>

<table border="0" cellpadding="2" width="100%" bgcolor="#B4B8CD">
    <tr>
        <td><pre> datasetName = STRIP(TRANSLATE(GetDsn(ddName)),,&quot;'&quot;)
or
 datasetName = STRIP(TRANSLATE(Get_Dataset_Name(ddName)),,&quot;'&quot;)</pre>
        </td>
    </tr>
</table>

<p><img src="../Pics/fish4.gif" width="45" height="20"
name="Graphic15">Literals should be quoted, unless you can be
sure that the literal hasn't been used as a symbol elsewhere.</p>

<p><img src="../Pics/fish4.gif" width="45" height="20"
name="Graphic15">Commands being passed to external environments
often have single quotes in them. E.g. <strong>address TSO &quot;ALLOC
FI(TEST) DA('MY.DATASET') SHR REUSE&quot;. </strong></p>

<p><img src="../Pics/fish4.gif" width="45" height="20"
name="Graphic15">NetRexx (and presumably other close relatives of
Rexx) are sufficiently different from Rexx to make consideration
of styles that apply to NetRexx irrelevant. Having said that
NetRexx is a case insensitive language, and most style rules
should apply to it.</p>

<hr>

<h1 align="center">An Example Set of Style Rules.</h1>

<p>Here is programming style that meets the above criteria in
varying degrees. It tries to keep the code dense for 3270
displays, and relies heavily on a highlighting editor to
differentiate between keywords, quoted text, variable names, and
other statement elements.</p>

<p><img src="../Pics/fish4.gif" width="45" height="20"
name="Graphic16">Rules specifically related to case:</p>

<ul>
    <li>Keywords in lower case. Let the editor highlight them. E.g.
        <strong>select do if end </strong></li>
    <li>Variable names starting in lower case with the initial
        letters of concatenated words in upper case. This
        differentiates them from function names, which will all
        start with an upper case character. E.g. <strong>myName
        counter fishType</strong> </li>
    <li>Internal function names with the initial letters of
        individual words in upper case. Optionally, you can also
        use underscore separators E.g. <strong>MyFunction()
        MyOtherFunction() Your_Function()</strong> </li>
    <li>External function names in upper case. This saves having
        to quote them. E.g. <strong>MYFUNC() EXTFUNC()</strong> </li>
    <li>Builtin functions in upper case. This rule is pretty
        arbitrary, as the highlighting editor will mark them in a
        different colour to user supplied functions anyway. E.g. <strong>SUBSTR()
        D2B() MVSVAR()</strong> </li>
    <li>External environment names in upper case. Note that
        address treats the environment name as a constant, and
        does not perform symbolic substitution. E.g. <strong>address
        TSO &quot;X&quot;, address ISPEXEC &quot;FTCLOSE&quot;,
        address SH &quot;cat myfile&quot;</strong></li>
    <li>Commands for external environments preferably in upper
        case, unless the environment is case sensitive. E.g. <strong>address
        TSO &quot;ALLOC FI(&quot;ddName&quot;) SHR REUSE DA(&quot;dsName&quot;)&quot;</strong>
    </li>
</ul>

<p><img src="../Pics/fish4.gif" width="45" height="20"
name="Graphic17">Rules for quoting:</p>

<ul>
    <li>Enclose commands to external environments in double
        quotes, coming out of quotes to pass variables into the
        command. E.g. <strong>address TSO &quot;ALLOC FI(&quot;ddName&quot;)
        SHR REUSE DA(&quot;dsName&quot;)&quot;</strong> </li>
    <li>Always quote literal strings. Never rely on the string
        not being used as a variable name. E.g. <strong>myVar = 'test'</strong>.
        Never use <strong>myVar = test</strong> </li>
    <li>Use variables for quotes if building strings containing
        both single and double quotes to avoid the opening and
        closing becoming confusing: E.g. <strong>myVar = dq||sq||'test'||sq||dq</strong>
        rather than <strong>myVar = '&quot;'&quot;'test'&quot;'&quot;'</strong>
    </li>
</ul>

<p><img src="../Pics/fish4.gif" width="45" height="20"
name="Graphic18">Rules for procedures:</p>

<ul>
    <li>Use the <strong>procedure</strong> keyword wherever
        possible, to avoid collisions between variable names in
        different procedures. E.g. <strong>My_Function: procedure
        expose (global).</strong> </li>
    <li>Use commas and <em>not</em> spaces to delimit your
        arguments. See the <a href="#CalculateFactorial">Calculate_Factorial</a>
        demo for an example. </li>
    <li>Use a comment in the style of javaDoc before each
        procedure, so that possible future 'rexxDoc'
        implementations will be able to pick up your comments.
        See the <a href="#ProcComment">LZ78 demo</a> for an
        example. </li>
</ul>

<p><img src="../Pics/fish4.gif" width="45" height="20"
name="Graphic19">Rules for comments:</p>

<ul>
    <li>Use a standard machine readable header to document a
        synopsis of the exec, change information, and any other
        useful information. Create a tool to manage and extract
        useful information from these headers.</li>
    <li>Comment logical groups of statements, indicating what
        they do. E.g. <strong>do</strong> loops, <strong>select</strong>
        blocks.</li>
    <li>Aim your comments at a reasonably competent programmer
        who is not familiar with your exec. </li>
    <li>Comment what end statements are ending. E.g. <strong>end
        /* select */.</strong> </li>
    <li>Indicate what variables are to be used for when they are
        first assigned. See the example in an earlier chapter.</li>
    <li>Use a boxed comment to mark where procedures begin. See
        the <a href="#ProcComment">LZ78 demo </a>for an example. </li>
</ul>

<p><img src="../Pics/fish4.gif" width="45" height="20"
name="Graphic20">Other miscellaneous rules:</p>

<ul>
    <li>Use <strong>i, k, j,</strong> etc. as loop control
        variables. This can make your code run faster, and helps
        keep statements short..</li>
    <li>Indent <strong>do</strong>, <strong>select</strong>, and
        other similar structures with between 1 and 3 spaces. </li>
</ul>

<p><img src="../Pics/fish4.gif" width="45" height="20"
name="Graphic21"><strong>An aside on following a ruleset:</strong>
One important comment that must be made, is that it is not so
important that one set of rules is followed in all cases, but <em>it
is important that a set of rules is followed consistently in a
piece of work. </em>Leaping from one style to another mid-procedure
can hinder a readers understanding of the program.</p>

<hr>

<h1 align="center">Style Example</h1>

<p><img src="../Pics/fish4.gif" width="45" height="20"
name="Graphic22">Here's an example program, with two similar
internal functions present, in two slightly different styles. The
compress function follows the above example set of guidelines.
The uncompress function follows a second consistent set of
guidelines. Note how the uncompress function is easier to read
when no colour highlighting is used. Copy the program into a Rexx
sensitive editor, and the compress function becomes easier to
read. </p>

<table border="0" cellpadding="2" width="100%" bgcolor="#B4B8CD">
    <tr>
        <td><pre>/* REXX ----------------------------------------------------------
   SYNOPSIS : LZ78 compressor/decompressor demo
   VERSION  : 1.0
   CREATED  : April 1999 
   NOTES    : From the uberFish Rexx Style Guide.
   --------------------------------------------------------------- */
/* Demo normal text compress/decompress */
say 'Normal text demo.'
inString  = 'If_I_were_a_Linesman,_' ,
         || 'I_would_execute_the_players_who_applauded_my_offsides.'

say 'Compressing 'LENGTH(inString)' byte string .....'
say inString

compString = Compress_LZ78(inString)
say 'Compressed as.....'
say compString

decompString = Uncompress_LZ78(compString)
say 'Decompressed as.....'
say decompString

/* Demo Highly redundant text compress/decompress */
say
say 'Highly redundant demo.'
inString  = 'Oogachacka,Oogachacka,Oogachacka,'
inString  = inString||inString||inString||inString
inString  = inString||inString||inString||inString
say 'Compressing 'LENGTH(inString)' byte string .....'
say inString

compString = Compress_LZ78(inString)
say 'Compressed as.....'
say compString

decompString = Uncompress_LZ78(compString)
say 'Decompressed as.....'
say decompString


exit 0</pre>
        <pre><a name="ProcComment">/**</a> ================================================================
    Demo LZ78 compressor. In reality, the output would be formatted
    to take up less space then the original, E,g, in 9bit bytes,
    with the high order bit set on when the char is a dictionary
    reference, or something.
    Oh, and it doesnt like spaces, cos I use WORDPOS() to search
    the dictionary. 
   ----------------------------------------------------------------- */
Compress_LZ78: procedure
parse arg inString

/* Initialise the dictionary, output string, etc */
outString = '' /* output string                                    */
d         = '' /* Dictionary. Blank delimited 'words'              */
w         = '' /* Last used phrase                                 */
outCode   = '' /* Our current dictionary reference for this phrase */

/* For every char in the input string, output the char, or a
   dictionary reference */
do i = 1 to LENGTH(inString)

   /* Get next input char, and make phrase */
   thisChar = SUBSTR(inString,i,1)
   thisPhrase = w||thisChar

   /* If the new phrase is in the dictionary, queue up this dictionary
      reference to go into the output string */
   if WORDPOS(thisPhrase,d) &gt; 0 then do
      if outCode = '' then outString = LEFT(outString,LENGTH(outString)-1)
      outCode = '&lt;'WORDPOS(thisPhrase,d)'&gt;'
      w = thisPhrase
      end

   /* If the new phrase wasnt in the dictionary, output it */
   else do
      outString = outString||outCode||thisChar
      outCode   = ''
      d = d thisPhrase
      w = thisChar
      end
end

/* return the compressed string */
return outString||outCode</pre>
        <pre>/** =================================================================
    Demo LZ78 uncompressor.
    Here Ive switched to another style for comparison.
    ----------------------------------------------------------------- */
Uncompress_LZ78: procedure

parse arg inString

/* Initialise stuff */
outString = ''
d = ''
w = ''

/* Loop across each char in input string, building dictionary
   and output string as we go */
Do i = 1 To Length(inString)
   /* Get next char from input string */
   thisChar = Substr(inString,i,1)
   /* If the char is a code, then look up code in dictionary,
      add new phrase to dictionary, add phrase to output */
   If thisChar = '&lt;' Then
    Do
      thisCode = Substr(inString,i+1,Pos('&gt;',inString,i)-i-1)
      thisOut  = Word(d,thisCode)
      d = d || ' ' || w || Left(thisOut,1)
      w = thisOut
      i = i + Length(thisCode) +1
      outString = outString || thisOut
    End
   /* Else add phrase to dictionary and output the character */
   Else
    Do
      d = d || ' ' || w || thisChar
      w = thisChar
      outString = outString || thisChar
    End
End</pre>
        <pre>/* Return the uncompressed string */
Return outString
</pre>
        </td>
    </tr>
</table>

<p>Spot the line that is longer than 80 characters. In ISPF it
should be wrapped in whatever way is consistent with your
treatment if <strong>IF THEN DO </strong>constructs:</p>

<table border="0" cellpadding="2" width="100%" bgcolor="#B4B8CD">
    <tr>
        <td><pre>if outCode = '' then
   outString = LEFT(outString,LENGTH(outString)-1)</pre>
        </td>
    </tr>
</table>

<hr>

<h1 align="center">Enforcing Programming Standards.</h1>

<p>There's little point in setting guidelines for writing
programs if they're going to be ignored. You have to make people
want to follow your guidelines.</p>

<p><img src="../Pics/fish4.gif" width="45" height="20"
name="Graphic23">Here are some ways of encouraging the use of
programming standards:</p>

<ul>
    <li>Allow individuals to follow the guidelines as they see
        fit. </li>
    <li>Use management control. </li>
    <li>Automate the process by supplying easy to use tools to
        manage internal documentation and format code. </li>
</ul>

<p>Relying on individuals can fail if lazy or naive programmers
fail to follow guidelines. It does allow creative and expert
programmers the freedom to use systems they are comfortable and
productive with.</p>

<p>Management control is particularly suited to organizations
that have a Quality Assurance program. </p>

<p>A tools led approach can be combined with other approaches.
There is some development effort to get tools into place, and the
tools must be flexible and fit for their purpose. Generally, a
handful of ISPF EDIT macros to perform various formatting tasks
will suffice.</p>

<p>&nbsp;</p>

<hr>

<h1 align="center">Concatenating Strings.</h1>

<p>There are two schools of thought on whether to explicitly use
the string concatenation operator ( || ) or not.</p>

<table border="0" cellpadding="2" width="100%" bgcolor="#B4B8CD">
    <tr>
        <td><pre>say 'Explicit use of operators'
newString = oldString || ' Some Text ' || MYFUNC('ham','eggs') 
say Status_Char(userStatus,'TEXT') || ': ' ,
  ||userName || ' is ' || userStatus</pre>
        <pre>say 'Omission of operators.'
newString = oldString 'Some Text' MYFUNC('ham','eggs') 
say Status_Char(userStatus,'TEXT')':' userName 'is' userStatus</pre>
        </td>
    </tr>
</table>

<p>There are some good reasons to use concatenation operators,
and some good reasons not to. </p>

<p><img src="../Pics/fish4.gif" width="45" height="20"
name="Graphic11">Points for the use of the concatenation operator:</p>

<ul>
    <li>Programmers supporting your code often do not use Rexx
        regularly.</li>
    <li>Component elements of the string will be explicit to the
        reader.</li>
    <li>Unexpected spaces can creep in when ommitting
        concatenation operators.</li>
</ul>

<p><img src="../Pics/fish4.gif" width="45" height="20"
name="Graphic11">Points for ommiting the operator whenever
convenient:</p>

<ul>
    <li>Less is more. The resulting code is tidier.</li>
    <li>The Hilite function of the editor makes the component
        elements clear enough anyway.</li>
    <li>There is less chance of the statement overrunning onto
        the next line.</li>
    <li>You don't have to explicitly include spaces inserted
        between the strings. E.g. <strong>var1 || ' ' || var2</strong>
        <em>versus</em> <strong>var1 var2</strong></li>
</ul>

<hr>

<h1 align="center">Some Other Dos and Don'ts</h1>

<p><img src="../Pics/fish4.gif" width="45" height="20"
name="Graphic23">Don't use too many levels of indirection.<br>
For instance, there is often little use in storing ISPF panel
names in variables when address ISPEXEC &quot;DISPLAY PANEL(MYPANEL)&quot;
pinpoints exactly where in your exec that panel MYPANEL is
actually used. Having functions call functions that call
functions can equally make debugging an exec very tiresome indeed,
so make sure that you comment what is going on if you do have to
create a complicated structure.</p>

<p><img src="../Pics/fish4.gif" width="45" height="20"
name="Graphic23">Do make sure abstracted procedures allow full
access to the underlying data.<br>
For instance, say you put a nice shell exec around TSO LISTCAT.
Your shell program should be able to control all arguments for
LISTCAT, and return any information returned by LISTCAT to the
caller. Otherwise you may have to create a new interface for your
old shell if new LISTCAT data is needed. Adding new functionality
to old code creates backwards compatibility problems, and
maintenance problems as the code becomes 'hairy' from unnecessary
revisions.</p>

<p><img src="../Pics/fish4.gif" width="45" height="20"
name="Graphic23">Don't hide information in variables set far away
from where they are used.<br>
Its one thing to have a nice block of commented assignations near
the top of an exec or procedure, but its another thing entirely
to place assignation statements in obscure parts of the exec, far
away from where they will actually be used.</p>

<p><img src="../Pics/fish4.gif" width="45" height="20"
name="Graphic23">Do end all internal procedures with an
unconditional RETURN.<br>
This makes it clear to the reader when a procedure ends and may
help code formatting tools to spot the end of internal procedures.</p>

<hr>

<h1 align="center">Send Feedback</h1>

<p align="left"><img src="../Pics/fish4.gif" width="45"
height="20" name="Graphic23">Please <a
href="mailto:NHancock@bigfoot.com">drop me a line</a>, and tell
me about any improvements you think could be made to this page.</p>

<ul>
    <li><p align="left">Was the information useful?</p>
    </li>
    <li><p align="left">Was the information complete and concise?</p>
    </li>
    <li><p align="left">Did you understand the information?</p>
    </li>
</ul>

<hr>

<p align="center"><!-- webbot bot="HTMLMarkup" startspan --><!-- BEGIN WEBSIDESTORY CODE v5 --><!-- COPYRIGHT 1998-1999 WEBSIDESTORY, INC. ALL RIGHTS RESERVED.  U.S. PATENT PENDING. --><a
href="http://rd1.hitbox.com/rd?acct=W8190430682181NU0&amp;p=s"><img
src="http://hg1.hitbox.com/HG?hc=w116&amp;l=y&amp;hb=W8190430682181NU0&amp;cd=1&amp;n=Rexx+Style+Guide"
alt="Click Here!" border="0" width="88" height="62"
name="Graphic24"></a></p>

<p><!-- END WEBSIDESTORY CODE --><!-- webbot bot="HTMLMarkup" endspan --></p>
</body>
</html>
